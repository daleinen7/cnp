---
const { form } = Astro.props;

// Ensure field labels are converted to safe names
function toSlug(text) {
  return text
    .toLowerCase()
    .replace(/\s+/g, '-')
    .replace(/[^a-z0-9-]/g, '');
}
---

<form
  name="contact"
  method="POST"
  data-netlify="true"
  netlify-honeypot="bot-field"
>
  <!-- Important: Hidden field ensures Netlify recognizes the form -->
  <input type="hidden" name="form-name" value="contact" />

  {form.headline && <h2>{form.headline}</h2>}

  <ul>
    {
      form.formFields &&
        form.formFields.map((field, index) => {
          const isRequired = field.required ? true : false;
          const fieldName = toSlug(field.label); // Ensure safe field name
          const fieldId = `${fieldName}-${index}`; // Unique ID for each field

          switch (field.type) {
            case 'text':
            case 'email':
            case 'tel':
            case 'number':
            case 'date':
              return (
                <li>
                  <label for={fieldId}>
                    {field.label}
                    <input
                      id={fieldId}
                      type={field.type}
                      name={fieldName}
                      required={isRequired}
                    />
                  </label>
                </li>
              );
            case 'textarea':
              return (
                <li>
                  <label for={fieldId}>
                    {field.label}
                    <textarea
                      id={fieldId}
                      name={fieldName}
                      required={isRequired}
                    />
                  </label>
                </li>
              );
            case 'checkbox':
              return (
                <li>
                  <label for={fieldId}>
                    <input
                      id={fieldId}
                      type="checkbox"
                      name={fieldName}
                      required={isRequired}
                    />
                    {field.label}
                  </label>
                </li>
              );
            case 'radio':
              return (
                <li>
                  <fieldset>
                    <legend>{field.label}</legend>
                    {field.options &&
                      field.options.map((option, optIndex) => {
                        const optionId = `${fieldName}-${optIndex}`;
                        return (
                          <label for={optionId}>
                            <input
                              id={optionId}
                              type="radio"
                              name={fieldName}
                              value={option.value}
                              required={isRequired}
                            />
                            {option.label}
                          </label>
                        );
                      })}
                  </fieldset>
                </li>
              );
            case 'select':
              return (
                <li>
                  <label for={fieldId}>
                    {field.label}
                    <select
                      id={fieldId}
                      name={fieldName}
                      required={isRequired}
                    >
                      {field.options &&
                        field.options.map((option) => (
                          <option value={option.value}>
                            {option.label}
                          </option>
                        ))}
                    </select>
                  </label>
                </li>
              );
            default:
              return null;
          }
        })
    }
  </ul>

  <!-- Honeypot Field (Hidden from Users, Visible to Bots) -->
  <input type="text" name="bot-field" style="display: none;" />

  <button type="submit">Submit</button>
</form>

<style>
  form {
    width: 90%;
    margin: 2rem auto;
    display: flex;
    flex-direction: column;
    max-width: 59rem;
  }
  fieldset {
    display: flex;
    gap: 1rem;
    flex-flow: row wrap;
    margin-bottom: 1rem;
  }
  /* visually hide the labels in the fieldset, but is still accessible to screenreaders */
  fieldset label {
    clip: rect(0 0 0 0);
    clip-path: inset(50%);
    overflow: hidden;
    position: absolute;
    white-space: nowrap;
    width: 1px;
    height: 1px;
  }
  fieldset input {
    margin: 0;
    width: 100%;
  }
  input {
    border-radius: var(--radius);
    border: 1px solid var(--dark-gray);
    height: 2.75rem;
    margin-bottom: 1rem;
    padding-left: 1rem;
  }
  label,
  legend {
    font-weight: 700;
    margin-bottom: 0.25rem;
  }
  li {
    list-style: none;
  }
  li > label {
    display: flex;
    flex-direction: column;
  }
  textarea {
    border-radius: var(--radius);
    border: 1px solid var(--dark-gray);
    height: 10rem;
    margin-bottom: 1rem;
    padding: 1rem;
  }
  input:user-invalid,
  textarea:user-invalid {
    border-color: var(--error-red);
    color: var(--error-red);
  }
  .marked-required {
    color: var(--error-red);
  }
  button {
    border-radius: var(--radius);
    background: var(--light-gray);
    height: 2.75rem;
    border: none;
    font-weight: 700;
    font-size: 1.25rem;
  }
  button:hover {
    cursor: pointer;
  }
  form:has(input:user-invalid, textarea:user-invalid) button {
    color: var(--deep-red);
    background-color: var(--pale-red);
  }
  @media (width > 768px) {
    fieldset {
      flex-wrap: nowrap;
    }
    fieldset input {
      flex-basis: 48%;
    }
  }
</style>
