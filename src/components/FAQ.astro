---
import { PortableText } from 'astro-portabletext';
const { faqs } = Astro.props;
const sectionCount = faqs.sections.length;
const rawCount = faqs.sections.length;
const columnCount = rawCount > 3 ? 2 : rawCount;
---

<div class="faqs width-wrapper" style={`--col-count: ${columnCount};`}>
  {
    faqs.sections.map((section: any, sectionIdx: number) => (
      <div class="section">
        <h4>{section.sectionTitle}</h4>
        <div class="faq">
          {section.columns.map((faq: any, faqIdx: number) => {
            const uniqueId = `faq-answer-${sectionIdx}-${faqIdx}`;
            return (
              <div class="faq-item">
                <button type="button" class="faq-question" data-id={uniqueId}>
                  {faq.question}
                  <img
                    class="arrow"
                    src="/arrow.svg"
                    width="30"
                    height="10"
                    alt="arrow"
                  />
                </button>
                <div id={uniqueId} class="faq-answer">
                  <PortableText value={faq.answer} />
                </div>
              </div>
            );
          })}
        </div>
      </div>
    ))
  }
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const buttons = document.querySelectorAll('.faq-question');
    buttons.forEach((button) => {
      button.addEventListener('click', () => {
        const id = button.getAttribute('data-id') || '';
        const answer = document.getElementById(id);
        if (answer) {
          answer.classList.toggle('open');
          button.classList.toggle('open');
        }
      });
    });
  });
</script>

<style>
  h4 {
    font-size: 1.875rem;
    font-weight: bold;
  }
  .faqs {
    display: grid;
    gap: 2rem;
    margin: 0 auto;
    padding: 1rem;
    grid-template-columns: repeat(var(--col-count), 1fr);
  }
  .faq-question {
    color: #4a2791;
  }

  /* Mobile-first: stack everything */
  @media (max-width: 640px) {
    .faqs {
      grid-template-columns: 1fr;
    }
  }

  /* Medium: allow 2 columns max */
  @media (min-width: 641px) and (max-width: 1023px) {
    .faqs {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  /* Large: allow 3 columns only if we clamped for it */
  @media (min-width: 1024px) {
    .faqs {
      grid-template-columns: repeat(var(--col-count), 1fr);
    }
  }

  .faq {
    max-width: 70.625rem;
    margin: 0 auto;
  }

  .faq-item {
    margin-bottom: 1rem;
  }

  .faq-question {
    margin-top: 0.25rem;

    width: 100%;
    text-align: left;
    padding: 0.75rem;
    border: none;
    border-bottom: 2px solid #e0e0e0;
    cursor: pointer;
    font-size: 1.5rem;
    font-weight: bold;
    transition: border-width 0.3s;
    background: none;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .arrow {
    transition: transform 0.3s ease;
  }

  .faq-question.open .arrow {
    margin-top: 0.25rem;
    transform: rotate(180deg);
  }

  .faq-answer {
    max-height: 0;
    max-width: 68.7rem;
    margin: 0 auto;
    overflow: hidden;
    transition:
      max-height 0.3s ease-out,
      padding 0.3s ease-out;
    padding: 0 0.75rem;
  }

  .faq-answer.open {
    max-height: none;
    padding: 0.75rem;
    border-bottom: 1px solid #e0e0e0;
  }
</style>
