---
const { form } = Astro.props;
---

<form class="wrapper narrow-wrapper">
  {form.headline && <h2>{form.headline}</h2>}
  {
    form.formFields &&
      form.formFields.map((field: any) => {
        const isRequired = field.required ? true : false;

        switch (field.type) {
          case 'text':
          case 'email':
          case 'tel':
          case 'number':
          case 'date':
            return (
                <label>
                  {field.label}{isRequired ? <span class="marked-required">*</span> : null}
                  <input
                    type={field.type}
                    name={field.label}
                    placeholder={field.label}
                    required={isRequired}
                  />
                </label>
            );
          case 'textarea':
            return (
                <label>
                  {field.label}{isRequired ? <span class="marked-required">*</span> : null}
                  <textarea
                    name={field.label}
                    placeholder={field.label}
                    required={isRequired}
                  />
                </label>
            );
          case 'checkbox':
            return (
                <label>
                  <input
                    type="checkbox"
                    name={field.label}
                    placeholder={field.label}
                    required={isRequired}
                  />
                  {field.label}{isRequired ? <span class="marked-required">*</span> : null}
                </label>
            );
          case 'radio':
            return (
                <fieldset>
                  <legend>{field.label}{isRequired ? <span class="marked-required">*</span> : null}</legend>
                  {field.options &&
                    field.options.map((option: any) => (
                      <label>
                        <input
                          type="radio"
                          name={field.label}
                          value={option.value}
                          required={isRequired}
                        />
                        {option.label}
                      </label>
                    ))}
                </fieldset>
            );
          case 'select':
            return (
                <label>
                  {field.label}{isRequired ? <span class="marked-required">*</span> : null}
                  <select name={field.label} required={isRequired}>
                    {field.options &&
                      field.options.map((option: any) => (
                        <option value={option.value}>
                          {option.label}
                        </option>
                      ))}
                  </select>
                </label>
            );
          default:
            return null;
        }
      })
  }
  <button type="submit">Submit</button>
</form>

<style>
  form {
    margin: 2rem auto;
    display: flex;
    flex-direction: column;
  }
  h2 {
    margin-bottom: 3rem;
  }
  fieldset {
    display: flex;
    gap: 2.5rem;
    flex-flow: row wrap;
    margin-bottom: 1rem;
  }
  fieldset input {
    margin: 0;
    width: 100%;
  }
  input,
  select,
  textarea {
    display: block;
    border-radius: var(--radius);
    border: 1px solid var(--dark-gray);
    height: 2.75rem;
    margin-block: 0.5rem 1.5rem;
    padding-left: 1rem;
  }
  input {
    width: calc(100% - 1rem);
  }
  textarea {
    height: 10rem;
    padding: 1rem;
    width: calc(100% - 2rem);
  }
  select {
    width: 100%;
  }

  input:hover,
  select:hover,
  textarea:hover,
  input:active,
  input:focus,
  input:focus-visible,
  select:active,
  select:focus,
  select:focus-visible,
  textarea:active,
  textarea:focus,
  textarea:focus-visible {
    border: 2px solid var(--mid-purple);
    outline: none;
  }
  label,
  legend {
    font-weight: 700;
  }

  label:has(input[type=checkbox]),
  label:has(input[type=radio]) {
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: 1rem;
  }
    input[type=checkbox] {
      margin: 0.25rem 0 0 0;
    }
    input[type=checkbox],
    input[type=radio] {
      accent-color: var(--mid-purple);
      width: 1rem !important;
      accent-color: var(--mid-purple);
  }
  input:user-invalid,
  textarea:user-invalid {
    border-color: var(--error-red);
    color: var(--error-red);
  }
  .marked-required {
    color: var(--error-red);
  }
  button {
    border-radius: var(--radius);
    background: var(--light-gray);
    height: 2.75rem;
    border: none;
    font-weight: 700;
    font-size: 1.25rem;
    margin-top: 1rem;
    transition: filter var(--transition);
  }
  button:hover {
    cursor: pointer;
    filter: drop-shadow(
      3px 3px 0 var(--black)
    );
  }
  form:has(input:user-invalid, textarea:user-invalid) button {
    color: var(--deep-red);
    background-color: var(--pale-red);
  }
  @media (width > 768px) {
    fieldset:not(:has(input[type=radio])) {
      flex-wrap: nowrap;
    }
    fieldset input:not(input[type=radio]) {
      flex-basis: 48%;
    }
  }
</style>
